import aiogram
from aiogram.utils.exceptions import BotBlocked

bot = aiogram.Bot(token="1796535419:AAFMLfG35KAugeQqhDmWdApx5pZMnK43fDU")
dp = aiogram.Dispatcher(bot)

options = ["–ì–æ—Ä–æ—Å–∫–æ–ø", "–ü–æ–≥–æ–¥–∞", "–ù–æ–≤–æ—Å—Ç–∏",
           "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–°—á—ë—Ç—á–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–æ—Ö–æ–¥–æ–≤", "–°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫",
           "–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–µ–º—å–µ—Ä", "–†–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"]

zodiac_signs = ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã",
                "–°–∫–æ—Ä–ø–∏–æ–Ω", "–ó–º–µ–µ–Ω–æ—Å–µ—Ü", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]


@dp.message_handler(commands="help")
async def get_help(message: aiogram.types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å."""
    keyboard = aiogram.types.InlineKeyboardMarkup()
    keyboard.add(aiogram.types.InlineKeyboardButton(text="–ü—Ä–æ–µ–∫—Ç", url="https://github.com/Disfavour/python-project"))
    await message.reply("/help\n"
                        "/dice\n"
                        "/start",
                        reply_markup=keyboard)


@dp.message_handler(commands="dice")
async def cmd_dice(message: aiogram.types.Message):
    """–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫."""
    await message.answer_dice(emoji="üé≤")


@dp.message_handler(commands="start")
async def cmd_start(message: aiogram.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    keyboard = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = options
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=keyboard)


@dp.message_handler(regexp=r"^–ì–æ—Ä–æ—Å–∫–æ–ø$")
async def goroskop(message: aiogram.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–Ω–∞–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
    keyboard = aiogram.types.InlineKeyboardMarkup(row_width=3)
    tmp = []
    for item in zodiac_signs:
        tmp.append(aiogram.types.InlineKeyboardButton(text=item, callback_data=item))
    keyboard.add(*tmp)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞", reply_markup=keyboard)


@dp.callback_query_handler(text=zodiac_signs)
async def send_random_value(call: aiogram.types.CallbackQuery):
    await call.message.answer(call.data)


@dp.message_handler()
async def echo(message: aiogram.types.Message):
    """–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."""
    await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ " + message.text)


@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: aiogram.types.Update, exception: BotBlocked):
    """–ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")
    return True


if __name__ == "__main__":
    aiogram.executor.start_polling(dp, skip_updates=True)
